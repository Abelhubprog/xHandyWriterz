# ========================================
# Mattermost Environment Variables
# ========================================
# This file documents all environment variables needed for Mattermost deployment.
# Copy this file to .env and fill in the actual values.
# 
# IMPORTANT: Environment variables (MM_*) override settings in config/mattermost.json
# Railway automatically injects some variables (DATABASE_URL, PGUSER, PGPASSWORD, etc.)

# ========================================
# REQUIRED: Database Configuration (Railway Postgres)
# ========================================
# Railway provides DATABASE_URL in format: postgresql://user:pass@host:port/dbname
# Mattermost needs individual components. Extract from Railway's DATABASE_URL or use:

# Database host (Railway internal: postgres.railway.internal or use Railway's private networking)
# For Railway, use the internal hostname shown in Postgres service settings
MM_DB_HOST=postgres

# Database port (Railway default: 5432)
MM_DB_PORT=5432

# Database name (Railway default: railway, can be customized in Postgres settings)
MM_DB_NAME=railway

# Database username (Railway provides via PGUSER variable)
# You can reference ${PGUSER} if Railway exposes it, or set manually
MM_DB_USER=postgres

# Database password (Railway provides via PGPASSWORD variable)
# Extract from DATABASE_URL or use Railway's PGPASSWORD variable
MM_DB_PASSWORD=your_postgres_password_here

# SSL mode for Postgres connection
# Railway requires SSL, use "require" or "verify-ca"
# Options: disable (local only), require (Railway), verify-ca, verify-full
MM_DB_SSL_MODE=require

# ========================================
# REQUIRED: Site Configuration
# ========================================
# CRITICAL: Full URL where Mattermost will be accessible
# This MUST match your actual domain or Railway will reject WebSocket connections
# Railway format: https://mattermost-production-xxxx.up.railway.app
# Custom domain: https://chat.yourdomain.com
# 
# Set this in Railway dashboard under service environment variables:
MM_SERVICESETTINGS_SITEURL=https://mattermost-production.up.railway.app

# Port Mattermost listens on internally
# Railway maps this to public PORT automatically
# Leave as :8065 (Mattermost default) unless you have specific requirements
MM_SERVICESETTINGS_LISTENADDRESS=:8065

# ========================================
# REQUIRED: File Storage (Cloudflare R2)
# ========================================
# R2 is S3-compatible object storage for uploaded files, avatars, attachments
# Get credentials from Cloudflare Dashboard > R2 > Manage R2 API Tokens

# R2 endpoint URL (includes your Cloudflare account ID)
# Format: https://ACCOUNT_ID.r2.cloudflarestorage.com
# Find Account ID: Cloudflare Dashboard > R2 > Overview (top right)
MM_R2_ENDPOINT=https://<your_account_id>.r2.cloudflarestorage.com

# R2 region (always "auto" for Cloudflare R2)
MM_R2_REGION=auto

# R2 bucket name (create in Cloudflare Dashboard > R2 > Create bucket)
# Recommended: chat-uploads or handywriterz-mattermost
MM_R2_BUCKET=chat-uploads

# R2 Access Key ID (from API token creation)
# Generate: Cloudflare Dashboard > R2 > Manage R2 API Tokens > Create API Token
# Permissions: Object Read & Write
MM_R2_ACCESS_KEY_ID=your_r2_access_key_id_here

# R2 Secret Access Key (from API token creation)
# KEEP THIS SECRET! Do not commit to git
MM_R2_SECRET_ACCESS_KEY=your_r2_secret_access_key_here

# Optional: Path prefix within bucket (organizes files by team/channel)
# Example: "team" stores files as: chat-uploads/team/TEAMID/...
# Leave empty for root level storage
MM_R2_PATH_PREFIX=team

# ========================================
# OPTIONAL: OIDC/SSO Integration (Clerk)
# ========================================
# Enable single sign-on with Clerk for unified authentication
# Leave blank to disable OIDC (users will use email/password)

# Clerk frontend API endpoint
# Format: https://your-clerk-subdomain.clerk.accounts.dev
MM_OIDC_SERVICE_PROVIDER_IDENTIFIER=https://<your-clerk-domain>

# Clerk OIDC discovery endpoint
# Format: https://your-clerk-subdomain.clerk.accounts.dev/.well-known/openid-configuration
MM_OIDC_DISCOVERY_ENDPOINT=https://<your-clerk-domain>/.well-known/openid-configuration

# Clerk application Client ID (from Clerk Dashboard > SSO Connections)
MM_OIDC_CLIENT_ID=

# Clerk application Client Secret (from Clerk Dashboard > SSO Connections)
# KEEP THIS SECRET!
MM_OIDC_CLIENT_SECRET=

# Default team name for OIDC users (creates team automatically)
MM_OIDC_TEAM_NAME=handywriterz

# ========================================
# OPTIONAL: Admin Bootstrap
# ========================================
# Create initial admin account on first deployment
# After first login, change this password immediately!

# Admin email address (must be valid format)
MM_ADMIN_EMAIL=admin@handywriterz.com

# Admin initial password (change after first login!)
# Must meet complexity requirements: 8+ chars, upper+lower+number+symbol
MM_ADMIN_PASSWORD=ChangeMe123!

# ========================================
# OPTIONAL: Email/SMTP Configuration
# ========================================
# Enable email notifications for mentions, direct messages, etc.
# Leave blank to disable email features (users won't receive notifications)

# SMTP server hostname (e.g., smtp.gmail.com, smtp.sendgrid.net)
MM_EMAILSETTINGS_SMTPSERVER=

# SMTP server port (typically 587 for TLS, 465 for SSL, 25 for plain)
MM_EMAILSETTINGS_SMTPPORT=587

# SMTP username (usually your email address)
MM_EMAILSETTINGS_SMTPUSERNAME=

# SMTP password or API key
MM_EMAILSETTINGS_SMTPPASSWORD=

# Enable SMTP authentication (true for most providers)
MM_EMAILSETTINGS_ENABLESMTPAUTH=true

# Connection security: "" (none), "TLS", or "STARTTLS"
# Use "TLS" for port 465, "STARTTLS" for port 587
MM_EMAILSETTINGS_CONNECTIONSECURITY=TLS

# From address for outgoing emails
MM_EMAILSETTINGS_FEEDBACKEMAIL=noreply@handywriterz.com

# Enable email notifications globally
MM_EMAILSETTINGS_SENDEMAILNOTIFICATIONS=false

# ========================================
# OPTIONAL: Security & Performance
# ========================================
# Enable developer mode (verbose logging, useful for debugging)
# Set to false in production for security
MM_SERVICESETTINGS_ENABLEDEVELOPER=false

# Enable API testing endpoint (disable in production)
MM_SERVICESETTINGS_ENABLETESTING=false

# Session length in days (how long users stay logged in)
MM_SERVICESETTINGS_SESSIONLENGTHMOBILEINDECAYS=30
MM_SERVICESETTINGS_SESSIONLENGTHWEBINDAYS=30

# Maximum database connections (tune based on Railway plan)
# Higher values = more concurrent users, but uses more memory
MM_SQLSETTINGS_MAXOPENCONNS=128

# Maximum idle database connections
MM_SQLSETTINGS_MAXIDLECONNS=10

# Enable SQL query tracing (debug only, expensive in production)
MM_SQLSETTINGS_TRACE=false

# ========================================
# OPTIONAL: Plugins & Features
# ========================================
# Enable plugin system
MM_PLUGINSETTINGS_ENABLE=true

# Allow plugin uploads via admin console
MM_PLUGINSETTINGS_ENABLEUPLOADS=true

# Enable compliance exports
MM_COMPLIANCESETTINGS_ENABLED=true

# Enable metrics endpoint (/metrics for monitoring)
MM_METRICSSETTINGS_ENABLE=true

# Log level: DEBUG (verbose), INFO (default), WARN, ERROR (quiet)
MM_LOGSETTINGS_CONSOLELEVEL=INFO

# ========================================
# LOCAL DEVELOPMENT ONLY: MinIO Override
# ========================================
# Use local MinIO instead of R2 for development
# Railway deployment ignores these (uses R2 settings above)

# MinIO root user (local dev only)
MINIO_ROOT_USER=minioadmin

# MinIO root password (local dev only)
MINIO_ROOT_PASSWORD=minioadmin

# MinIO region (local dev only)
MINIO_REGION=us-east-1

# MinIO bucket name (local dev only)
MINIO_BUCKET_NAME=chat-uploads

# ========================================
# Railway Deployment Guide
# ========================================
#
# 1. CREATE POSTGRES DATABASE:
#    Railway Dashboard > New > Database > PostgreSQL
#    Note the DATABASE_URL, PGUSER, PGPASSWORD variables
#
# 2. CREATE R2 BUCKET:
#    Cloudflare Dashboard > R2 > Create bucket
#    Name: chat-uploads
#    Location: Automatic
#
# 3. GENERATE R2 API TOKEN:
#    Cloudflare Dashboard > R2 > Manage R2 API Tokens
#    Create API Token > Permissions: Object Read & Write
#    Copy Access Key ID and Secret Access Key
#
# 4. CONFIGURE RAILWAY SERVICE:
#    Railway Dashboard > Add Service > Deploy from GitHub repo
#    Select: xHandyWriterz repository
#    
#    CRITICAL SETTINGS:
#    - Root Directory: . (DOT - repository root, NOT /apps/mattermost)
#    - Config-as-code: apps/mattermost/railway.json
#    
# 5. ADD ENVIRONMENT VARIABLES:
#    Railway Dashboard > Service > Variables tab
#    Add all REQUIRED variables from this file:
#    - MM_DB_* (extract from Postgres DATABASE_URL)
#    - MM_SERVICESETTINGS_SITEURL (use Railway-generated URL)
#    - MM_R2_* (from Cloudflare R2)
#    
# 6. DEPLOY:
#    Railway will automatically deploy when you save variables
#    Monitor build logs for errors
#    
# 7. VERIFY HEALTH CHECK:
#    Railway checks: /api/v4/system/ping (120s timeout)
#    Should return: {"status": "OK"}
#    
# 8. CREATE ADMIN ACCOUNT:
#    Visit: https://mattermost-production-xxxx.up.railway.app
#    First user to sign up becomes admin (if MM_ADMIN_EMAIL not set)
#    Or use MM_ADMIN_EMAIL/MM_ADMIN_PASSWORD from this file
#    
# 9. TEST FILE UPLOADS:
#    Login > Create channel > Upload file
#    Verify file appears in R2 bucket via Cloudflare dashboard
#
# 10. CONFIGURE CUSTOM DOMAIN (optional):
#    Railway Dashboard > Service > Settings > Domains
#    Add custom domain: chat.yourdomain.com
#    Update DNS records as instructed by Railway
#    Update MM_SERVICESETTINGS_SITEURL to match custom domain

# ========================================
# Troubleshooting Common Issues
# ========================================
#
# DATABASE CONNECTION FAILED:
#   - Verify Railway Postgres service is running
#   - Check MM_DB_HOST matches Postgres internal hostname
#   - Ensure MM_DB_SSL_MODE=require (Railway requires SSL)
#   - Verify MM_DB_NAME matches Postgres database name (default: railway)
#   - Extract correct password from DATABASE_URL
#
# FILE UPLOAD FAILED:
#   - Verify R2 bucket exists in Cloudflare dashboard
#   - Check R2 credentials are correct (test with AWS CLI)
#   - Confirm MM_R2_ENDPOINT includes your account ID
#   - Verify R2 API token has Object Read & Write permissions
#   - Test R2 connection: aws s3 ls --endpoint-url=$MM_R2_ENDPOINT
#
# WEBSOCKET CONNECTION FAILED:
#   - Ensure MM_SERVICESETTINGS_SITEURL matches actual domain EXACTLY
#   - Check Railway proxy settings (should auto-handle WebSockets)
#   - Verify no trailing slash in SITEURL
#   - Test WebSocket: wscat -c wss://your-domain/api/v4/websocket
#
# SERVICE WON'T START:
#   - Check Railway build logs for errors
#   - Verify Root Directory is "." (not /apps/mattermost)
#   - Confirm config-as-code path: apps/mattermost/railway.json
#   - Check railway.json is valid JSON (no UTF-8 BOM)
#   - Verify Dockerfile COPY paths are correct
#
# HEALTH CHECK FAILING:
#   - Verify Postgres connection works
#   - Check R2 credentials are valid
#   - Review Mattermost logs: Railway > Service > Logs
#   - Ensure port 8065 is exposed in Dockerfile
#   - Test health endpoint: curl https://your-domain/api/v4/system/ping
#
# 404 TRAIN HAS NOT ARRIVED:
#   - Root Directory must be "." in Railway dashboard
#   - Config-as-code path must be "apps/mattermost/railway.json"
#   - Verify railway.json exists at correct path
#   - Check build logs for Docker context errors

# ========================================
# Environment Variable Reference
# ========================================
# All MM_* variables follow pattern: MM_SECTION_SETTING
# Maps to config JSON: Section.Setting
# 
# Examples:
# MM_SERVICESETTINGS_SITEURL → ServiceSettings.SiteURL
# MM_SQLSETTINGS_DRIVERNAME → SqlSettings.DriverName
# MM_FILESETTINGS_DRIVERNAME → FileSettings.DriverName
#
# Priority (highest to lowest):
# 1. Environment variables (MM_*)
# 2. config/mattermost.json
# 3. Mattermost defaults
#
# Full list: https://docs.mattermost.com/configure/environment-configuration-settings.html
